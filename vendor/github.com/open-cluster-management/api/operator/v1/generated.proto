
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.open_cluster_management.api.operator.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ClusterManager configures the controllers on the hub that govern registration and work distribution for attached klusterlets.
// ClusterManager will be only deployed in open-cluster-management-hub namespace.
message ClusterManager {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached klusterlets.
  optional ClusterManagerSpec spec = 2;

  // Status represents the current status of controllers that govern the lifecycle of managed clusters.
  // +optional
  optional ClusterManagerStatus status = 3;
}

// ClusterManagerList is a collection of deployment configurations for registration and work distribution controllers.
message ClusterManagerList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of deployment configurations for registration and work distribution controllers.
  repeated ClusterManager items = 2;
}

// ClusterManagerSpec represents a desired deployment configuration of controllers that govern registration and work distribution for attached klusterlets.
message ClusterManagerSpec {
  // RegistrationImagePullSpec represents the desired image of registration controller installed on hub.
  // +required
  optional string registrationImagePullSpec = 1;
}

// ClusterManagerStatus represents the current status of the registration and work distribution controllers running on the hub.
message ClusterManagerStatus {
  // Conditions contain the different condition statuses for this ClusterManager.
  // Valid condition types are:
  // Applied: components in hub are applied.
  // Available: components in hub are available and ready to serve.
  // Progressing: components in hub are in a transitioning state.
  // Degraded: components in hub do not match the desired configuration and only provide
  // degraded service.
  repeated StatusCondition conditions = 1;
}

// Klusterlet represents controllers on the managed cluster. When configured,
// the Klusterlet requires a secret named of bootstrap-hub-kubeconfig in the
// same namespace to allow API requests to the hub for the registration protocol.
message Klusterlet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec represents the desired deployment configuration of klusterlet agent.
  optional KlusterletSpec spec = 2;

  // Status represents the current status of klusterlet agent.
  optional KlusterletStatus status = 3;
}

// KlusterletList is a collection of klusterlet agent.
message KlusterletList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of klusterlet agent.
  repeated Klusterlet items = 2;
}

// KlusterletSpec represents the desired deployment configuration of klusterlet agent.
message KlusterletSpec {
  // Namespace is the namespace to deploy the agent.
  // The namespace must have a prefix of "open-cluster-management-", and if it is not set,
  // the namespace of "open-cluster-management-spoke" is used to deploy agent.
  // +optional
  optional string namespace = 1;

  // RegistrationImagePullSpec represents the desired image configuration of registration agent.
  // +required
  optional string registrationImagePullSpec = 2;

  // WorkImagePullSpec represents the desired image configuration of work agent.
  // +required
  optional string workImagePullSpec = 3;

  // ClusterName is the name of the spoke cluster to be created on hub.
  // The spoke agent generates a random name if it is not set, or discovers the appropriate cluster name on openshift.
  // +optional
  optional string clusterName = 4;

  // ExternalServerURLs represents the a list of apiserver urls and ca bundles that is accessible externally
  // If it is set empty, spoke cluster has no externally accessible url that hub cluster can visit.
  // +optional
  repeated ServerURL externalServerURLs = 5;
}

// KlusterletStatus represents the current status of klusterlet agent.
message KlusterletStatus {
  // Conditions contain the different condition statuses for this spokecore.
  // Valid condition types are:
  // Applied: components in spoke is applied.
  // Available: components in spoke are available and ready to serve.
  // Progressing: components in spoke are in a transitioning state.
  // Degraded: components in spoke do not match the desired configuration and only provide
  // degraded service.
  repeated StatusCondition conditions = 1;
}

// ServerURL represents the apiserver url and ca bundle that is accessible externally
message ServerURL {
  // URL is the url of apiserver endpoint of the spoke cluster.
  // +required
  optional string url = 1;

  // CABundle is the ca bundle to connect to apiserver of the spoke cluster.
  // System certs are used if it is not set.
  // +optional
  optional bytes caBundle = 2;
}

// StatusCondition contains condition information.
message StatusCondition {
  // Type is the type of the cluster condition.
  // +required
  optional string type = 1;

  // Status is the status of the condition. One of True, False, Unknown.
  // +required
  optional string status = 2;

  // LastTransitionTime is the last time the condition changed from one status to another.
  // +required
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // Reason is a (brief) reason for the condition's last status change.
  // +required
  optional string reason = 4;

  // Message is a human-readable message indicating details about the last status change.
  // +required
  optional string message = 5;
}

